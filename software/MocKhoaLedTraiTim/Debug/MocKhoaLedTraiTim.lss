
MocKhoaLedTraiTim.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003d8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000044c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  0000044c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000044c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000047c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  000004b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008c5  00000000  00000000  00000530  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004f9  00000000  00000000  00000df5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000596  00000000  00000000  000012ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  00001884  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000344  00000000  00000000  00001a44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000081a  00000000  00000000  00001d88  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  000025a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	5e c1       	rjmp	.+700    	; 0x2c0 <__vector_1>
   4:	15 c0       	rjmp	.+42     	; 0x30 <__bad_interrupt>
   6:	14 c0       	rjmp	.+40     	; 0x30 <__bad_interrupt>
   8:	13 c0       	rjmp	.+38     	; 0x30 <__bad_interrupt>
   a:	12 c0       	rjmp	.+36     	; 0x30 <__bad_interrupt>
   c:	11 c0       	rjmp	.+34     	; 0x30 <__bad_interrupt>
   e:	10 c0       	rjmp	.+32     	; 0x30 <__bad_interrupt>
  10:	0f c0       	rjmp	.+30     	; 0x30 <__bad_interrupt>
  12:	0e c0       	rjmp	.+28     	; 0x30 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61

0000001c <__do_clear_bss>:
  1c:	20 e0       	ldi	r18, 0x00	; 0
  1e:	a0 e6       	ldi	r26, 0x60	; 96
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	01 c0       	rjmp	.+2      	; 0x26 <.do_clear_bss_start>

00000024 <.do_clear_bss_loop>:
  24:	1d 92       	st	X+, r1

00000026 <.do_clear_bss_start>:
  26:	a2 36       	cpi	r26, 0x62	; 98
  28:	b2 07       	cpc	r27, r18
  2a:	e1 f7       	brne	.-8      	; 0x24 <.do_clear_bss_loop>
  2c:	a3 d1       	rcall	.+838    	; 0x374 <main>
  2e:	d2 c1       	rjmp	.+932    	; 0x3d4 <_exit>

00000030 <__bad_interrupt>:
  30:	e7 cf       	rjmp	.-50     	; 0x0 <__vectors>

00000032 <xuat_du_lieu>:
#include <avr/interrupt.h>
#include <avr/sleep.h>
#include <util/delay.h>
#include "random.h"

void xuat_du_lieu (unsigned char  b) {
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	30 e0       	ldi	r19, 0x00	; 0
	unsigned char  j;

	for (j = 0; j < 8; j++) {
		PORTB = (b & (0x80 >> j)) ? PORTB | (1 << 0) : PORTB & ~(1 << 0);
  36:	e0 e8       	ldi	r30, 0x80	; 128
  38:	f0 e0       	ldi	r31, 0x00	; 0
  3a:	68 2f       	mov	r22, r24
  3c:	70 e0       	ldi	r23, 0x00	; 0
  3e:	af 01       	movw	r20, r30
  40:	02 2e       	mov	r0, r18
  42:	02 c0       	rjmp	.+4      	; 0x48 <__SREG__+0x9>
  44:	55 95       	asr	r21
  46:	47 95       	ror	r20
  48:	0a 94       	dec	r0
  4a:	e2 f7       	brpl	.-8      	; 0x44 <__SREG__+0x5>
  4c:	46 23       	and	r20, r22
  4e:	57 23       	and	r21, r23
  50:	45 2b       	or	r20, r21
  52:	19 f0       	breq	.+6      	; 0x5a <__SREG__+0x1b>
  54:	98 b3       	in	r25, 0x18	; 24
  56:	91 60       	ori	r25, 0x01	; 1
  58:	02 c0       	rjmp	.+4      	; 0x5e <__SREG__+0x1f>
  5a:	98 b3       	in	r25, 0x18	; 24
  5c:	9e 7f       	andi	r25, 0xFE	; 254
  5e:	98 bb       	out	0x18, r25	; 24

		PORTB &= ~(1 << 3);
  60:	c3 98       	cbi	0x18, 3	; 24
		PORTB |= (1 << 3);
  62:	c3 9a       	sbi	0x18, 3	; 24
  64:	2f 5f       	subi	r18, 0xFF	; 255
  66:	3f 4f       	sbci	r19, 0xFF	; 255
#include "random.h"

void xuat_du_lieu (unsigned char  b) {
	unsigned char  j;

	for (j = 0; j < 8; j++) {
  68:	28 30       	cpi	r18, 0x08	; 8
  6a:	31 05       	cpc	r19, r1
  6c:	41 f7       	brne	.-48     	; 0x3e <__SP_L__+0x1>
		PORTB = (b & (0x80 >> j)) ? PORTB | (1 << 0) : PORTB & ~(1 << 0);

		PORTB &= ~(1 << 3);
		PORTB |= (1 << 3);
	}
	PORTB &= ~(1 << 4);
  6e:	c4 98       	cbi	0x18, 4	; 24
	PORTB |= (1 << 4);
  70:	c4 9a       	sbi	0x18, 4	; 24
  72:	08 95       	ret

00000074 <chop_tat>:
}

void chop_tat(unsigned char  b) {
  74:	cf 93       	push	r28
  76:	df 93       	push	r29
  78:	d8 2f       	mov	r29, r24
  7a:	c0 e6       	ldi	r28, 0x60	; 96
	unsigned char  j;

	for (j = 0; j < 96; j++) {
		xuat_du_lieu(b);
  7c:	8d 2f       	mov	r24, r29
  7e:	d9 df       	rcall	.-78     	; 0x32 <xuat_du_lieu>
		b = ~b;
  80:	d0 95       	com	r29
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  82:	2f ef       	ldi	r18, 0xFF	; 255
  84:	87 e5       	ldi	r24, 0x57	; 87
  86:	92 e0       	ldi	r25, 0x02	; 2
  88:	21 50       	subi	r18, 0x01	; 1
  8a:	80 40       	sbci	r24, 0x00	; 0
  8c:	90 40       	sbci	r25, 0x00	; 0
  8e:	e1 f7       	brne	.-8      	; 0x88 <chop_tat+0x14>
  90:	00 c0       	rjmp	.+0      	; 0x92 <chop_tat+0x1e>
  92:	00 00       	nop
  94:	c1 50       	subi	r28, 0x01	; 1
}

void chop_tat(unsigned char  b) {
	unsigned char  j;

	for (j = 0; j < 96; j++) {
  96:	91 f7       	brne	.-28     	; 0x7c <chop_tat+0x8>
		xuat_du_lieu(b);
		b = ~b;
		_delay_ms(80);
	}
}
  98:	df 91       	pop	r29
  9a:	cf 91       	pop	r28
  9c:	08 95       	ret

0000009e <xep_dan>:

void xep_dan(unsigned char  xuoi) {
  9e:	6f 92       	push	r6
  a0:	7f 92       	push	r7
  a2:	8f 92       	push	r8
  a4:	9f 92       	push	r9
  a6:	af 92       	push	r10
  a8:	bf 92       	push	r11
  aa:	cf 92       	push	r12
  ac:	df 92       	push	r13
  ae:	ef 92       	push	r14
  b0:	ff 92       	push	r15
  b2:	0f 93       	push	r16
  b4:	1f 93       	push	r17
  b6:	cf 93       	push	r28
  b8:	df 93       	push	r29
  ba:	98 2e       	mov	r9, r24
  bc:	0f 2e       	mov	r0, r31
  be:	f9 e0       	ldi	r31, 0x09	; 9
  c0:	ef 2e       	mov	r14, r31
  c2:	f1 2c       	mov	r15, r1
  c4:	f0 2d       	mov	r31, r0
	unsigned char  b, a, i, j;

	b = 0x00;
  c6:	a1 2c       	mov	r10, r1
  c8:	80 e0       	ldi	r24, 0x00	; 0

	for (i = 0; i < 9; i++) {
		a = b;

		for (j = 0; j < 9 - i; j++) {
  ca:	61 2c       	mov	r6, r1
  cc:	71 2c       	mov	r7, r1
			xuat_du_lieu(b);
			b = a;
			b |= (xuoi) ? 0x01 << (j - 1) : 0x80 >> (j - 1);
  ce:	00 e8       	ldi	r16, 0x80	; 128
  d0:	10 e0       	ldi	r17, 0x00	; 0
  d2:	88 24       	eor	r8, r8
  d4:	83 94       	inc	r8
  d6:	2d c0       	rjmp	.+90     	; 0x132 <__stack+0x93>
	b = 0x00;

	for (i = 0; i < 9; i++) {
		a = b;

		for (j = 0; j < 9 - i; j++) {
  d8:	c6 2c       	mov	r12, r6
  da:	d7 2c       	mov	r13, r7
  dc:	b1 2c       	mov	r11, r1
			xuat_du_lieu(b);
  de:	a9 df       	rcall	.-174    	; 0x32 <xuat_du_lieu>
			b = a;
			b |= (xuoi) ? 0x01 << (j - 1) : 0x80 >> (j - 1);
  e0:	99 20       	and	r9, r9
  e2:	49 f0       	breq	.+18     	; 0xf6 <__stack+0x57>
  e4:	21 e0       	ldi	r18, 0x01	; 1
  e6:	c2 1a       	sub	r12, r18
  e8:	d1 08       	sbc	r13, r1
  ea:	88 2d       	mov	r24, r8
  ec:	01 c0       	rjmp	.+2      	; 0xf0 <__stack+0x51>
  ee:	88 0f       	add	r24, r24
  f0:	ca 94       	dec	r12
  f2:	ea f7       	brpl	.-6      	; 0xee <__stack+0x4f>
  f4:	09 c0       	rjmp	.+18     	; 0x108 <__stack+0x69>
  f6:	31 e0       	ldi	r19, 0x01	; 1
  f8:	c3 1a       	sub	r12, r19
  fa:	d1 08       	sbc	r13, r1
  fc:	c8 01       	movw	r24, r16
  fe:	02 c0       	rjmp	.+4      	; 0x104 <__stack+0x65>
 100:	95 95       	asr	r25
 102:	87 95       	ror	r24
 104:	ca 94       	dec	r12
 106:	e2 f7       	brpl	.-8      	; 0x100 <__stack+0x61>
 108:	8a 29       	or	r24, r10
 10a:	9f ef       	ldi	r25, 0xFF	; 255
 10c:	26 e7       	ldi	r18, 0x76	; 118
 10e:	31 e0       	ldi	r19, 0x01	; 1
 110:	91 50       	subi	r25, 0x01	; 1
 112:	20 40       	sbci	r18, 0x00	; 0
 114:	30 40       	sbci	r19, 0x00	; 0
 116:	e1 f7       	brne	.-8      	; 0x110 <__stack+0x71>
 118:	00 c0       	rjmp	.+0      	; 0x11a <__stack+0x7b>
 11a:	00 00       	nop
	b = 0x00;

	for (i = 0; i < 9; i++) {
		a = b;

		for (j = 0; j < 9 - i; j++) {
 11c:	b3 94       	inc	r11
 11e:	cb 2c       	mov	r12, r11
 120:	d1 2c       	mov	r13, r1
 122:	cc 16       	cp	r12, r28
 124:	dd 06       	cpc	r13, r29
 126:	dc f2       	brlt	.-74     	; 0xde <__stack+0x3f>
 128:	91 e0       	ldi	r25, 0x01	; 1
 12a:	e9 1a       	sub	r14, r25
 12c:	f1 08       	sbc	r15, r1
void xep_dan(unsigned char  xuoi) {
	unsigned char  b, a, i, j;

	b = 0x00;

	for (i = 0; i < 9; i++) {
 12e:	31 f0       	breq	.+12     	; 0x13c <__stack+0x9d>
 130:	a8 2e       	mov	r10, r24
		a = b;

		for (j = 0; j < 9 - i; j++) {
 132:	e7 01       	movw	r28, r14
 134:	1e 14       	cp	r1, r14
 136:	1f 04       	cpc	r1, r15
 138:	7c f2       	brlt	.-98     	; 0xd8 <__stack+0x39>
 13a:	f6 cf       	rjmp	.-20     	; 0x128 <__stack+0x89>
			b = a;
			b |= (xuoi) ? 0x01 << (j - 1) : 0x80 >> (j - 1);
			_delay_ms(50);
		}
	}
}
 13c:	df 91       	pop	r29
 13e:	cf 91       	pop	r28
 140:	1f 91       	pop	r17
 142:	0f 91       	pop	r16
 144:	ff 90       	pop	r15
 146:	ef 90       	pop	r14
 148:	df 90       	pop	r13
 14a:	cf 90       	pop	r12
 14c:	bf 90       	pop	r11
 14e:	af 90       	pop	r10
 150:	9f 90       	pop	r9
 152:	8f 90       	pop	r8
 154:	7f 90       	pop	r7
 156:	6f 90       	pop	r6
 158:	08 95       	ret

0000015a <sang_dan_tat_dan>:

void sang_dan_tat_dan(unsigned char  batdau, unsigned char  lanlap, unsigned char  sangdan, unsigned char  xuoi) {
 15a:	bf 92       	push	r11
 15c:	cf 92       	push	r12
 15e:	df 92       	push	r13
 160:	ef 92       	push	r14
 162:	ff 92       	push	r15
 164:	0f 93       	push	r16
 166:	1f 93       	push	r17
 168:	cf 93       	push	r28
 16a:	df 93       	push	r29
	unsigned char  b, j;

	b = 0x00;

	for (j = 0; j < lanlap; j++) {
 16c:	66 23       	and	r22, r22
 16e:	79 f1       	breq	.+94     	; 0x1ce <sang_dan_tat_dan+0x74>
 170:	b2 2e       	mov	r11, r18
 172:	c4 2e       	mov	r12, r20
 174:	61 50       	subi	r22, 0x01	; 1
 176:	06 2f       	mov	r16, r22
 178:	10 e0       	ldi	r17, 0x00	; 0
 17a:	cf ef       	ldi	r28, 0xFF	; 255
 17c:	df ef       	ldi	r29, 0xFF	; 255
 17e:	d1 2c       	mov	r13, r1
		xuat_du_lieu(sangdan ? b : ~b);

		b |= (xuoi) ? (batdau << (j - 1)) : (batdau >> (j - 1));
 180:	e8 2e       	mov	r14, r24
 182:	f1 2c       	mov	r15, r1
	unsigned char  b, j;

	b = 0x00;

	for (j = 0; j < lanlap; j++) {
		xuat_du_lieu(sangdan ? b : ~b);
 184:	c1 10       	cpse	r12, r1
 186:	03 c0       	rjmp	.+6      	; 0x18e <sang_dan_tat_dan+0x34>
 188:	8d 2d       	mov	r24, r13
 18a:	80 95       	com	r24
 18c:	01 c0       	rjmp	.+2      	; 0x190 <sang_dan_tat_dan+0x36>
 18e:	8d 2d       	mov	r24, r13
 190:	50 df       	rcall	.-352    	; 0x32 <xuat_du_lieu>

		b |= (xuoi) ? (batdau << (j - 1)) : (batdau >> (j - 1));
 192:	bb 20       	and	r11, r11
 194:	39 f0       	breq	.+14     	; 0x1a4 <sang_dan_tat_dan+0x4a>
 196:	8e 2d       	mov	r24, r14
 198:	0c 2e       	mov	r0, r28
 19a:	01 c0       	rjmp	.+2      	; 0x19e <sang_dan_tat_dan+0x44>
 19c:	88 0f       	add	r24, r24
 19e:	0a 94       	dec	r0
 1a0:	ea f7       	brpl	.-6      	; 0x19c <sang_dan_tat_dan+0x42>
 1a2:	07 c0       	rjmp	.+14     	; 0x1b2 <sang_dan_tat_dan+0x58>
 1a4:	c7 01       	movw	r24, r14
 1a6:	0c 2e       	mov	r0, r28
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <sang_dan_tat_dan+0x54>
 1aa:	95 95       	asr	r25
 1ac:	87 95       	ror	r24
 1ae:	0a 94       	dec	r0
 1b0:	e2 f7       	brpl	.-8      	; 0x1aa <sang_dan_tat_dan+0x50>
 1b2:	d8 2a       	or	r13, r24
 1b4:	8f ef       	ldi	r24, 0xFF	; 255
 1b6:	96 e7       	ldi	r25, 0x76	; 118
 1b8:	21 e0       	ldi	r18, 0x01	; 1
 1ba:	81 50       	subi	r24, 0x01	; 1
 1bc:	90 40       	sbci	r25, 0x00	; 0
 1be:	20 40       	sbci	r18, 0x00	; 0
 1c0:	e1 f7       	brne	.-8      	; 0x1ba <sang_dan_tat_dan+0x60>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <sang_dan_tat_dan+0x6a>
 1c4:	00 00       	nop
 1c6:	21 96       	adiw	r28, 0x01	; 1
void sang_dan_tat_dan(unsigned char  batdau, unsigned char  lanlap, unsigned char  sangdan, unsigned char  xuoi) {
	unsigned char  b, j;

	b = 0x00;

	for (j = 0; j < lanlap; j++) {
 1c8:	c0 17       	cp	r28, r16
 1ca:	d1 07       	cpc	r29, r17
 1cc:	d9 f6       	brne	.-74     	; 0x184 <sang_dan_tat_dan+0x2a>

		b |= (xuoi) ? (batdau << (j - 1)) : (batdau >> (j - 1));

		_delay_ms(50);
	}
}
 1ce:	df 91       	pop	r29
 1d0:	cf 91       	pop	r28
 1d2:	1f 91       	pop	r17
 1d4:	0f 91       	pop	r16
 1d6:	ff 90       	pop	r15
 1d8:	ef 90       	pop	r14
 1da:	df 90       	pop	r13
 1dc:	cf 90       	pop	r12
 1de:	bf 90       	pop	r11
 1e0:	08 95       	ret

000001e2 <dich_sang>:

void dich_sang(unsigned char  xuoi) {
 1e2:	9f 92       	push	r9
 1e4:	af 92       	push	r10
 1e6:	bf 92       	push	r11
 1e8:	cf 92       	push	r12
 1ea:	df 92       	push	r13
 1ec:	ef 92       	push	r14
 1ee:	ff 92       	push	r15
 1f0:	0f 93       	push	r16
 1f2:	1f 93       	push	r17
 1f4:	cf 93       	push	r28
 1f6:	df 93       	push	r29
 1f8:	98 2e       	mov	r9, r24
 1fa:	0f 2e       	mov	r0, r31
 1fc:	fd ef       	ldi	r31, 0xFD	; 253
 1fe:	af 2e       	mov	r10, r31
 200:	bb 24       	eor	r11, r11
 202:	ba 94       	dec	r11
 204:	f0 2d       	mov	r31, r0
 206:	0e ef       	ldi	r16, 0xFE	; 254
 208:	1f ef       	ldi	r17, 0xFF	; 255
 20a:	cf ef       	ldi	r28, 0xFF	; 255
 20c:	df ef       	ldi	r29, 0xFF	; 255
	unsigned char  b, j;

	b = 0x00;
 20e:	80 e0       	ldi	r24, 0x00	; 0

	for (j = 0; j < 13; j++) {
		xuat_du_lieu(b);
		b = (xuoi) ? (0x01 << (j - 1)) | (0x01 << (j - 2)) | (0x01 << (j - 3))
 210:	68 94       	set
 212:	cc 24       	eor	r12, r12
 214:	c7 f8       	bld	r12, 7
 216:	d1 2c       	mov	r13, r1
 218:	ee 24       	eor	r14, r14
 21a:	e3 94       	inc	r14
 21c:	f1 2c       	mov	r15, r1
	unsigned char  b, j;

	b = 0x00;

	for (j = 0; j < 13; j++) {
		xuat_du_lieu(b);
 21e:	09 df       	rcall	.-494    	; 0x32 <xuat_du_lieu>
		b = (xuoi) ? (0x01 << (j - 1)) | (0x01 << (j - 2)) | (0x01 << (j - 3))
 220:	99 20       	and	r9, r9
 222:	c1 f0       	breq	.+48     	; 0x254 <dich_sang+0x72>
 224:	c7 01       	movw	r24, r14
 226:	00 2e       	mov	r0, r16
 228:	02 c0       	rjmp	.+4      	; 0x22e <dich_sang+0x4c>
 22a:	88 0f       	add	r24, r24
 22c:	99 1f       	adc	r25, r25
 22e:	0a 94       	dec	r0
 230:	e2 f7       	brpl	.-8      	; 0x22a <dich_sang+0x48>
 232:	a7 01       	movw	r20, r14
 234:	0c 2e       	mov	r0, r28
 236:	02 c0       	rjmp	.+4      	; 0x23c <dich_sang+0x5a>
 238:	44 0f       	add	r20, r20
 23a:	55 1f       	adc	r21, r21
 23c:	0a 94       	dec	r0
 23e:	e2 f7       	brpl	.-8      	; 0x238 <dich_sang+0x56>
 240:	84 2b       	or	r24, r20
 242:	a7 01       	movw	r20, r14
 244:	0a 2c       	mov	r0, r10
 246:	02 c0       	rjmp	.+4      	; 0x24c <dich_sang+0x6a>
 248:	44 0f       	add	r20, r20
 24a:	55 1f       	adc	r21, r21
 24c:	0a 94       	dec	r0
 24e:	e2 f7       	brpl	.-8      	; 0x248 <dich_sang+0x66>
 250:	84 2b       	or	r24, r20
 252:	17 c0       	rjmp	.+46     	; 0x282 <dich_sang+0xa0>
 254:	c6 01       	movw	r24, r12
 256:	00 2e       	mov	r0, r16
 258:	02 c0       	rjmp	.+4      	; 0x25e <dich_sang+0x7c>
 25a:	95 95       	asr	r25
 25c:	87 95       	ror	r24
 25e:	0a 94       	dec	r0
 260:	e2 f7       	brpl	.-8      	; 0x25a <dich_sang+0x78>
 262:	a6 01       	movw	r20, r12
 264:	0c 2e       	mov	r0, r28
 266:	02 c0       	rjmp	.+4      	; 0x26c <dich_sang+0x8a>
 268:	55 95       	asr	r21
 26a:	47 95       	ror	r20
 26c:	0a 94       	dec	r0
 26e:	e2 f7       	brpl	.-8      	; 0x268 <dich_sang+0x86>
 270:	84 2b       	or	r24, r20
 272:	96 01       	movw	r18, r12
 274:	0a 2c       	mov	r0, r10
 276:	02 c0       	rjmp	.+4      	; 0x27c <dich_sang+0x9a>
 278:	35 95       	asr	r19
 27a:	27 95       	ror	r18
 27c:	0a 94       	dec	r0
 27e:	e2 f7       	brpl	.-8      	; 0x278 <dich_sang+0x96>
 280:	82 2b       	or	r24, r18
 282:	9f ef       	ldi	r25, 0xFF	; 255
 284:	26 e7       	ldi	r18, 0x76	; 118
 286:	31 e0       	ldi	r19, 0x01	; 1
 288:	91 50       	subi	r25, 0x01	; 1
 28a:	20 40       	sbci	r18, 0x00	; 0
 28c:	30 40       	sbci	r19, 0x00	; 0
 28e:	e1 f7       	brne	.-8      	; 0x288 <dich_sang+0xa6>
 290:	00 c0       	rjmp	.+0      	; 0x292 <dich_sang+0xb0>
 292:	00 00       	nop
 294:	21 96       	adiw	r28, 0x01	; 1
 296:	0f 5f       	subi	r16, 0xFF	; 255
 298:	1f 4f       	sbci	r17, 0xFF	; 255
 29a:	9f ef       	ldi	r25, 0xFF	; 255
 29c:	a9 1a       	sub	r10, r25
 29e:	b9 0a       	sbc	r11, r25
void dich_sang(unsigned char  xuoi) {
	unsigned char  b, j;

	b = 0x00;

	for (j = 0; j < 13; j++) {
 2a0:	cc 30       	cpi	r28, 0x0C	; 12
 2a2:	d1 05       	cpc	r29, r1
 2a4:	09 f0       	breq	.+2      	; 0x2a8 <dich_sang+0xc6>
 2a6:	bb cf       	rjmp	.-138    	; 0x21e <dich_sang+0x3c>
		xuat_du_lieu(b);
		b = (xuoi) ? (0x01 << (j - 1)) | (0x01 << (j - 2)) | (0x01 << (j - 3))
		: (0x80 >> (j - 1)) | (0x80 >> (j - 2)) | (0x80 >> (j - 3));
		_delay_ms(50);
	}
}
 2a8:	df 91       	pop	r29
 2aa:	cf 91       	pop	r28
 2ac:	1f 91       	pop	r17
 2ae:	0f 91       	pop	r16
 2b0:	ff 90       	pop	r15
 2b2:	ef 90       	pop	r14
 2b4:	df 90       	pop	r13
 2b6:	cf 90       	pop	r12
 2b8:	bf 90       	pop	r11
 2ba:	af 90       	pop	r10
 2bc:	9f 90       	pop	r9
 2be:	08 95       	ret

000002c0 <__vector_1>:

ISR (INT0_vect) {
 2c0:	1f 92       	push	r1
 2c2:	0f 92       	push	r0
 2c4:	0f b6       	in	r0, 0x3f	; 63
 2c6:	0f 92       	push	r0
 2c8:	11 24       	eor	r1, r1
 2ca:	2f 93       	push	r18
 2cc:	3f 93       	push	r19
 2ce:	4f 93       	push	r20
 2d0:	5f 93       	push	r21
 2d2:	6f 93       	push	r22
 2d4:	7f 93       	push	r23
 2d6:	8f 93       	push	r24
 2d8:	9f 93       	push	r25
 2da:	af 93       	push	r26
 2dc:	bf 93       	push	r27
 2de:	cf 93       	push	r28
 2e0:	ef 93       	push	r30
 2e2:	ff 93       	push	r31
	unsigned char  x = random() % 4, j;
 2e4:	62 d0       	rcall	.+196    	; 0x3aa <random>
 2e6:	83 70       	andi	r24, 0x03	; 3

	if (x == 0) {
 2e8:	49 f4       	brne	.+18     	; 0x2fc <__vector_1+0x3c>
		xep_dan(1);
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	d8 de       	rcall	.-592    	; 0x9e <xep_dan>
		xep_dan(0);
 2ee:	80 e0       	ldi	r24, 0x00	; 0
 2f0:	d6 de       	rcall	.-596    	; 0x9e <xep_dan>
		xep_dan(1);
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	d4 de       	rcall	.-600    	; 0x9e <xep_dan>
		xep_dan(0);
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	d2 de       	rcall	.-604    	; 0x9e <xep_dan>
 2fa:	28 c0       	rjmp	.+80     	; 0x34c <__vector_1+0x8c>
	}

	else if (x == 1) {
 2fc:	81 30       	cpi	r24, 0x01	; 1
 2fe:	c1 f4       	brne	.+48     	; 0x330 <__vector_1+0x70>
 300:	c4 e0       	ldi	r28, 0x04	; 4
		for (j = 0; j < 4; j++) {
			sang_dan_tat_dan(0x01, 10, 1, 1);
 302:	21 e0       	ldi	r18, 0x01	; 1
 304:	41 e0       	ldi	r20, 0x01	; 1
 306:	6a e0       	ldi	r22, 0x0A	; 10
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	27 df       	rcall	.-434    	; 0x15a <sang_dan_tat_dan>
			sang_dan_tat_dan(0x01, 10, 0, 1);
 30c:	21 e0       	ldi	r18, 0x01	; 1
 30e:	40 e0       	ldi	r20, 0x00	; 0
 310:	6a e0       	ldi	r22, 0x0A	; 10
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	22 df       	rcall	.-444    	; 0x15a <sang_dan_tat_dan>
			sang_dan_tat_dan(0x80, 10, 1, 0);
 316:	20 e0       	ldi	r18, 0x00	; 0
 318:	41 e0       	ldi	r20, 0x01	; 1
 31a:	6a e0       	ldi	r22, 0x0A	; 10
 31c:	80 e8       	ldi	r24, 0x80	; 128
 31e:	1d df       	rcall	.-454    	; 0x15a <sang_dan_tat_dan>
			sang_dan_tat_dan(0x80, 10, 0, 0);
 320:	20 e0       	ldi	r18, 0x00	; 0
 322:	40 e0       	ldi	r20, 0x00	; 0
 324:	6a e0       	ldi	r22, 0x0A	; 10
 326:	80 e8       	ldi	r24, 0x80	; 128
 328:	18 df       	rcall	.-464    	; 0x15a <sang_dan_tat_dan>
 32a:	c1 50       	subi	r28, 0x01	; 1
		xep_dan(1);
		xep_dan(0);
	}

	else if (x == 1) {
		for (j = 0; j < 4; j++) {
 32c:	51 f7       	brne	.-44     	; 0x302 <__vector_1+0x42>
 32e:	0e c0       	rjmp	.+28     	; 0x34c <__vector_1+0x8c>
			sang_dan_tat_dan(0x80, 10, 1, 0);
			sang_dan_tat_dan(0x80, 10, 0, 0);
		}
	}

	else if (x ==2) {
 330:	82 30       	cpi	r24, 0x02	; 2
 332:	41 f4       	brne	.+16     	; 0x344 <__vector_1+0x84>
 334:	c6 e0       	ldi	r28, 0x06	; 6
		for (j = 0; j < 6; j++) {
			dich_sang(1);
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	54 df       	rcall	.-344    	; 0x1e2 <dich_sang>
			dich_sang(0);
 33a:	80 e0       	ldi	r24, 0x00	; 0
 33c:	52 df       	rcall	.-348    	; 0x1e2 <dich_sang>
 33e:	c1 50       	subi	r28, 0x01	; 1
			sang_dan_tat_dan(0x80, 10, 0, 0);
		}
	}

	else if (x ==2) {
		for (j = 0; j < 6; j++) {
 340:	d1 f7       	brne	.-12     	; 0x336 <__vector_1+0x76>
 342:	04 c0       	rjmp	.+8      	; 0x34c <__vector_1+0x8c>
			dich_sang(1);
			dich_sang(0);
		}
	}

	else if (x == 3) {
 344:	83 30       	cpi	r24, 0x03	; 3
 346:	11 f4       	brne	.+4      	; 0x34c <__vector_1+0x8c>
		chop_tat(0xFF);
 348:	8f ef       	ldi	r24, 0xFF	; 255
 34a:	94 de       	rcall	.-728    	; 0x74 <chop_tat>
	}

	xuat_du_lieu(0x00);
 34c:	80 e0       	ldi	r24, 0x00	; 0
 34e:	71 de       	rcall	.-798    	; 0x32 <xuat_du_lieu>
}
 350:	ff 91       	pop	r31
 352:	ef 91       	pop	r30
 354:	cf 91       	pop	r28
 356:	bf 91       	pop	r27
 358:	af 91       	pop	r26
 35a:	9f 91       	pop	r25
 35c:	8f 91       	pop	r24
 35e:	7f 91       	pop	r23
 360:	6f 91       	pop	r22
 362:	5f 91       	pop	r21
 364:	4f 91       	pop	r20
 366:	3f 91       	pop	r19
 368:	2f 91       	pop	r18
 36a:	0f 90       	pop	r0
 36c:	0f be       	out	0x3f, r0	; 63
 36e:	0f 90       	pop	r0
 370:	1f 90       	pop	r1
 372:	18 95       	reti

00000374 <main>:

int main(void) {
	random_init(0xabcd);
 374:	8d ec       	ldi	r24, 0xCD	; 205
 376:	9b ea       	ldi	r25, 0xAB	; 171
 378:	13 d0       	rcall	.+38     	; 0x3a0 <random_init>

	PORTB = 0x19;
 37a:	89 e1       	ldi	r24, 0x19	; 25
 37c:	88 bb       	out	0x18, r24	; 24
	DDRB = 0x19;
 37e:	87 bb       	out	0x17, r24	; 23

	GIMSK |= (1 << INT0);
 380:	8b b7       	in	r24, 0x3b	; 59
 382:	80 64       	ori	r24, 0x40	; 64
 384:	8b bf       	out	0x3b, r24	; 59

	sei();
 386:	78 94       	sei

	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
 388:	85 b7       	in	r24, 0x35	; 53
 38a:	87 7e       	andi	r24, 0xE7	; 231
 38c:	80 61       	ori	r24, 0x10	; 16
 38e:	85 bf       	out	0x35, r24	; 53

	while (1) {
		sleep_mode();
 390:	85 b7       	in	r24, 0x35	; 53
 392:	80 62       	ori	r24, 0x20	; 32
 394:	85 bf       	out	0x35, r24	; 53
 396:	88 95       	sleep
 398:	85 b7       	in	r24, 0x35	; 53
 39a:	8f 7d       	andi	r24, 0xDF	; 223
 39c:	85 bf       	out	0x35, r24	; 53
 39e:	f8 cf       	rjmp	.-16     	; 0x390 <main+0x1c>

000003a0 <random_init>:
{
	#ifdef USE_RANDOM_SEED
	random_number = lfsr16_next(eeprom_read_word((uint16_t *)RANDOM_SEED_ADDRESS) ^ seed);
	eeprom_write_word((uint16_t *)0, random_number);
	#else
	random_number = seed;
 3a0:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
 3a4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 3a8:	08 95       	ret

000003aa <random>:
}

uint16_t
random(void)
{
	return (random_number = lfsr16_next(random_number));
 3aa:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <_edata>
 3ae:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <_edata+0x1>
static uint16_t random_number = 0;

static uint16_t
lfsr16_next(uint16_t n)
{
	return (n >> 0x01U) ^ (-(n & 0x01U) & 0xB400U);
 3b2:	c9 01       	movw	r24, r18
 3b4:	81 70       	andi	r24, 0x01	; 1
 3b6:	99 27       	eor	r25, r25
 3b8:	91 95       	neg	r25
 3ba:	81 95       	neg	r24
 3bc:	91 09       	sbc	r25, r1
 3be:	88 27       	eor	r24, r24
 3c0:	94 7b       	andi	r25, 0xB4	; 180
 3c2:	36 95       	lsr	r19
 3c4:	27 95       	ror	r18
 3c6:	82 27       	eor	r24, r18
 3c8:	93 27       	eor	r25, r19
}

uint16_t
random(void)
{
	return (random_number = lfsr16_next(random_number));
 3ca:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
 3ce:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 3d2:	08 95       	ret

000003d4 <_exit>:
 3d4:	f8 94       	cli

000003d6 <__stop_program>:
 3d6:	ff cf       	rjmp	.-2      	; 0x3d6 <__stop_program>
